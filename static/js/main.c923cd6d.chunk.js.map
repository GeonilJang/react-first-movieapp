{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","title","src","Movie","_ref","genres","summary","map","index","key","App","state","_renderMovies","_this","movies","movie","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","console","log","setState","stop","this","fetch","then","res","json","data","catch","error","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTA6DA,SAASA,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAA/B,KAIN,SAASK,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC5B,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBI,IAAKA,EAAKC,MAAOD,EAAKE,IAAKH,IAU/CI,MAzDf,SAAAC,GAAgD,IAAhCH,EAAgCG,EAAhCH,MAAOF,EAAyBK,EAAzBL,OAAQM,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,QACrC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKC,KAEpCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKM,GACLR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEXS,EAAOE,IAAI,SAACf,EAAOgB,GACjB,OAAOf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAI5Cf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACVU,MC0BII,6MAzDbC,MAAM,KAMNC,cAAgB,WAQhB,OAPeC,EAAKF,MAAMG,OAAOP,IAAI,SAACQ,EAAOP,GAE3C,OAAOf,EAAAC,EAAAC,cAACqB,EAAD,CAAOf,MAAOc,EAAMd,MACbF,OAAQgB,EAAME,mBACdR,IAAKM,EAAMG,GAAIb,OAAQU,EAAMV,OAC7BC,QAASS,EAAMT,eAKjCa,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUZ,EAAKa,WADf,OACLZ,EADKS,EAAAI,KAEXC,QAAQC,IAAIf,GACZD,EAAKiB,SAAS,CACZhB,WAJS,wBAAAS,EAAAQ,SAAAX,EAAAY,WAsBbN,SAAW,WACT,OAAOO,MAAM,yDACZC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAK,OAAIX,QAAQC,IAAIU,yFAxC1BP,KAAKb,8CA4CL,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXoC,KAAKrB,MAAMG,OAASkB,KAAKpB,gBAAkB,qBApDnC4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.c923cd6d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport propTypes from 'prop-types';\nimport './Movie.css'\n//\n// class Movie extends Component{\n//\n//   static propTypes = {\n//     title: propTypes.string.isRequired,\n//     poster: propTypes.string.isRequired\n//   }\n//\n//   render(){\n//     //console.log(this.props);\n//     return(\n//       <div>\n//         <MoviePoster poster={this.props.poster}/>\n//         <h1>{this.props.title}</h1>\n//       </div>\n//     )\n//   };\n// }\n\nfunction Movie({title, poster, genres, summary}){\n  return(\n    <div className=\"Movie\">\n      <div className=\"Movie__Columns\">\n        <MoviePoster poster={poster} alt={title}/>\n      </div>\n      <div className=\"Movie__Columns\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Generes\">\n          {\n            genres.map((genre, index) => {\n              return <MovieGenre genre={genre} key={index}/>\n            })\n          }\n        </div>\n        <p className=\"Movie__Summary\">\n          {summary}\n        </p>\n      </div>\n    </div>\n  )\n}\n\nMovie.propTypes ={\n  title: propTypes.string.isRequired,\n  poster:propTypes.string.isRequired,\n  genres:propTypes.array.isRequired,\n  summary:propTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster : propTypes.string.isRequired,\n  alt : propTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n  genre : propTypes.string.isRequired\n}\n\nfunction MovieGenre({genre}){\n    return(\n      <span className=\"Movie Genre\">{genre} </span>\n    );\n}\n\nfunction MoviePoster({poster, alt}){\n  return (\n    <img className=\"Movie__Poster\" alt={alt} title={alt} src={poster}/>\n  )\n}\n\n\n\n\n\n\n\nexport default Movie\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\nclass App extends Component {\n\n  state={}\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = ()=>{\n  const movies = this.state.movies.map((movie, index)=>{\n    //console.log(index);\n    return <Movie title={movie.title}\n                  poster={movie.medium_cover_image}\n                  key={movie.id} genres={movie.genres}\n                  summary={movie.summary}/>\n  })\n  return movies\n}\n\n_getMovies = async () => {\n  const movies = await this._callApi()\n  console.log(movies)\n  this.setState({\n    movies\n  })\n  // movies.forEach(movie => {\n  //   this.setState({\n  //     movies:[\n  //       ...this.state.movies,\n  //       {\n  //         title:movie.title,\n  //         poster:movie.medium_cover_image,\n  //         id:movie.id,\n  //         genres:movie.genres,\n  //         summary:movie.summary\n  //       }\n  //     ]\n  //   })\n  // })\n}\n\n_callApi = () => {\n  return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=rating\")\n  .then(res => res.json())\n  .then(json => json.data.movies)\n  .catch(error => console.log(error))\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.movies ? this._renderMovies() : \"Loading...\"\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}